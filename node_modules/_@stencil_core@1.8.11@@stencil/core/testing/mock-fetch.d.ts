export declare function setupMockFetch(global: any): void;
export declare function mockFetchReset(): void;
export declare const mockFetch: {
    json(data: any, url?: string): void;
    text(data: string, url?: string): void;
    response(rsp: MockResponse, url?: string): void;
    reject(rsp?: MockResponse, url?: string): void;
    reset: typeof mockFetchReset;
};
export declare class MockHeaders {
    values: Map<string, string>;
    constructor(values?: string[][]);
    forEach(cb: (value: string, key: string) => void): void;
    serialize(): string[][];
    append(key: string, value: string): void;
    delete(key: string): void;
    get(key: string): string;
    has(key: string): boolean;
    set(key: string, value: string): void;
}
export interface MockRequestInit {
    headers?: MockHeaders;
    status?: number;
    statusText?: string;
}
export declare type MockRequestInfo = MockRequest | string;
export declare class MockRequest {
    headers?: MockHeaders;
    method?: 'DELETE' | 'GET' | 'HEAD' | 'OPTIONS' | 'POST' | 'PUT' | 'PATCH';
    url?: string;
    constructor(_mockInput: MockRequestInfo, _mockInit?: MockRequestInit);
}
export interface MockResponseInit {
    headers?: MockHeaders;
    ok?: boolean;
    status?: number;
    statusText?: string;
    type?: ResponseType;
    url?: string;
}
export declare class MockResponse {
    private mockedBody;
    private mockedResponseInit?;
    headers?: MockHeaders;
    ok: boolean;
    status?: number;
    statusText?: string;
    type?: string;
    url?: string;
    constructor(mockedBody: string, mockedResponseInit?: MockResponseInit);
    json(): Promise<any>;
    text(): Promise<string>;
    clone(): MockResponse;
}

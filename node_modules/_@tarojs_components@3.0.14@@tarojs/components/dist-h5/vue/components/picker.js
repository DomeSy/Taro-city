import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { listeners } from '../mixins/listeners';
import { refs } from '../mixins/refs';
export default {
  name: 'taro-picker',
  mixins: [listeners, refs],
  model: {
    event: 'model'
  },
  props: {
    range: Array,
    value: [Number, String, Array]
  },
  mounted: function mounted() {
    this.$el.value = this.value;
  },
  watch: {
    value: function value(newVal) {
      this.$el.value = newVal;
    }
  },
  render: function render(createElement) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    var self = this;
    return createElement('taro-picker-core', {
      class: 'hydrated',
      domProps: {
        range: self.range
      },
      on: _objectSpread(_objectSpread({}, self.listeners), {}, {
        change: function change(e) {
          self.$emit('change', e);
          self.$emit('model', e.target.value);
        }
      })
    }, self.$slots.default);
  }
};
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { listeners } from './mixins/listeners';
import { refs } from './mixins/refs';
export default function createFormsComponent(name, event) {
  var modelValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'value';
  var classNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var props = {};

  if (name === 'taro-input') {
    props.focus = Boolean;
  }

  return {
    name: name,
    mixins: [listeners, refs],
    model: {
      prop: modelValue,
      event: 'model'
    },
    props: props,
    methods: {
      input: function input(e) {
        this.$emit('input', e);
        this.$emit('model', e.target.value);
      },
      change: function change(e) {
        this.$emit('change', e);
        this.$emit('model', e.target.value);
      }
    },
    render: function render(createElement) {
      // eslint-disable-next-line
      var self = this;
      var attrs = {};

      if (name === 'taro-input') {
        attrs['auto-focus'] = self.focus;
      }

      var on = _objectSpread({}, self.listeners);

      on[event] = self[event];
      return createElement("".concat(name, "-core"), {
        class: ['hydrated'].concat(_toConsumableArray(classNames)),
        attrs: attrs,
        on: on
      }, self.$slots.default);
    }
  };
}
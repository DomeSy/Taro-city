'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const core = require('./core-06196d96.js');
const index$1 = require('./index-00392f71.js');

const Taro = require('@tarojs/taro');
const Navigator = class {
    constructor(hostRef) {
        core.registerInstance(this, hostRef);
        this.openType = 'navigate';
        this.isHover = false;
        this.delta = 0;
        this.onSuccess = core.createEvent(this, "cuccess", 7);
        this.onFail = core.createEvent(this, "fail", 7);
        this.onComplete = core.createEvent(this, "Complete", 7);
    }
    onClick() {
        const { openType, onSuccess, onFail, onComplete } = this;
        let promise = Promise.resolve();
        switch (openType) {
            case 'navigate':
                promise = Taro.navigateTo({
                    url: this.url
                });
                break;
            case 'redirect':
                promise = Taro.redirectTo({
                    url: this.url
                });
                break;
            case 'switchTab':
                promise = Taro.switchTab({
                    url: this.url
                });
                break;
            case 'reLaunch':
                promise = Taro.reLaunch({
                    url: this.url
                });
                break;
            case 'navigateBack':
                promise = Taro.navigateBack({
                    delta: this.delta
                });
                break;
            case 'exit':
                promise = Promise.reject(new Error('navigator:fail 暂不支持"openType: exit"'));
                break;
        }
        if (promise) {
            promise.then(res => {
                onSuccess.emit(res);
            }).catch(res => {
                onFail.emit(res);
            }).finally(() => {
                onComplete.emit();
            });
        }
    }
    render() {
        const { isHover, hoverClass } = this;
        return (core.h(core.Host, { class: index$1.classNames({
                [hoverClass]: isHover
            }) }));
    }
    static get style() { return ".navigator-hover{background:#efefef}"; }
};

exports.taro_navigator_core = Navigator;

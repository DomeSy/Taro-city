'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const core = require('./core-06196d96.js');

function fixControlledValue(value) {
    return value !== null && value !== void 0 ? value : '';
}
const Textarea = class {
    constructor(hostRef) {
        core.registerInstance(this, hostRef);
        this.disabled = false;
        this.maxlength = 140;
        this.autoFocus = false;
        this.hanldeInput = (e) => {
            e.stopPropagation();
            this.onInput.emit({
                value: e.target.value,
                cursor: e.target.value.length
            });
        };
        this.handleFocus = (e) => {
            this.onFocus.emit({
                value: e.target.value
            });
        };
        this.handleBlur = (e) => {
            this.onBlur.emit({
                value: e.target.value
            });
        };
        this.handleChange = (e) => {
            e.stopPropagation();
            this.onChange.emit({
                value: e.target.value
            });
        };
        this.onInput = core.createEvent(this, "input", 7);
        this.onFocus = core.createEvent(this, "focus", 7);
        this.onBlur = core.createEvent(this, "blur", 7);
        this.onChange = core.createEvent(this, "change", 7);
    }
    componentDidLoad() {
        Object.defineProperty(this.el, 'value', {
            get: () => this.textareaRef.value,
            set: value => (this.value = value),
            configurable: true
        });
        this.autoFocus && this.textareaRef.focus();
    }
    render() {
        const { value, placeholder, disabled, maxlength, autoFocus, name, hanldeInput, handleFocus, handleBlur, handleChange } = this;
        return (core.h("textarea", { ref: input => {
                if (input) {
                    this.textareaRef = input;
                }
            }, class: 'taro-textarea', value: fixControlledValue(value), placeholder: placeholder, name: name, disabled: disabled, maxlength: maxlength, autofocus: autoFocus, onInput: hanldeInput, onFocus: handleFocus, onBlur: handleBlur, onChange: handleChange }));
    }
    get el() { return core.getElement(this); }
    static get style() { return "taro-textarea-core{display:block;width:300px;height:150px}.taro-textarea{-webkit-appearance:none;cursor:auto;width:100%;height:100%;border:0;display:block;position:relative}.taro-textarea:focus{outline:none}"; }
};

exports.taro_textarea_core = Textarea;

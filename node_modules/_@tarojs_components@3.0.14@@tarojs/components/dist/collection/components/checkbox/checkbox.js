// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { h, Host } from "@stencil/core";
export class Checkbox {
    constructor() {
        this.value = '';
        this.checked = false;
        this.handleChange = e => {
            e.stopPropagation();
            this.onChange.emit({
                value: this.value
            });
        };
    }
    watchId(newVal) {
        if (newVal)
            this.inputEl.setAttribute('id', newVal);
    }
    componentDidRender() {
        this.id && this.el.removeAttribute('id');
    }
    render() {
        const { checked, name, color, value } = this;
        return (h(Host, { className: 'weui-cells_checkbox' },
            h("input", { ref: dom => {
                    if (!dom)
                        return;
                    this.inputEl = dom;
                    if (this.id)
                        dom.setAttribute('id', this.id);
                }, type: 'checkbox', value: value, name: name, class: 'taro-checkbox_checked', style: { color }, checked: checked, onChange: this.handleChange }),
            h("slot", null)));
    }
    static get is() { return "taro-checkbox-core"; }
    static get originalStyleUrls() { return {
        "$": ["./style/index.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["style/index.css"]
    }; }
    static get properties() { return {
        "name": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "name",
            "reflect": false
        },
        "value": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "value",
            "reflect": false,
            "defaultValue": "''"
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "color",
            "reflect": false
        },
        "id": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "id",
            "reflect": false
        },
        "checked": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "checked",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "onChange",
            "name": "checkboxchange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "id",
            "methodName": "watchId"
        }]; }
}

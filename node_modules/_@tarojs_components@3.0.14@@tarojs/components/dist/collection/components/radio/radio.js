// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { h, Host } from "@stencil/core";
export class Radio {
    constructor() {
        this.value = '';
        this.checked = false;
        this.handleClick = () => {
            if (!this.checked)
                this.checked = true;
        };
    }
    watchChecked(newVal) {
        newVal && this.onChange.emit({ value: this.value });
    }
    watchId(newVal) {
        if (newVal)
            this.inputEl.setAttribute('id', newVal);
    }
    componentDidRender() {
        this.id && this.el.removeAttribute('id');
    }
    render() {
        const { checked, name, value } = this;
        return (h(Host, { className: 'weui-cells_checkbox', onClick: this.handleClick },
            h("input", { ref: dom => {
                    if (!dom)
                        return;
                    this.inputEl = dom;
                    if (this.id)
                        dom.setAttribute('id', this.id);
                }, type: 'radio', name: name, value: value, class: 'weui-check', checked: checked, onChange: e => e.stopPropagation() }),
            h("i", { class: 'weui-icon-checked' }),
            h("slot", null)));
    }
    static get is() { return "taro-radio-core"; }
    static get properties() { return {
        "name": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "name",
            "reflect": false
        },
        "value": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "value",
            "reflect": false,
            "defaultValue": "''"
        },
        "id": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "id",
            "reflect": false
        },
        "checked": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "checked",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "onChange",
            "name": "radiochange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "checked",
            "methodName": "watchChecked"
        }, {
            "propName": "id",
            "methodName": "watchId"
        }]; }
}

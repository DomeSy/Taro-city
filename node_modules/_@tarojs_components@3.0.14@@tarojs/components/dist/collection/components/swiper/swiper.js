// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { h, Host } from "@stencil/core";
import Swipers from 'swiper';
import classNames from 'classnames';
let INSTANCE_ID = 0;
export class Swiper {
    constructor() {
        this._id = INSTANCE_ID++;
        /**
         * 是否显示面板指示点
         */
        this.indicatorDots = false;
        /**
         * 指示点颜色
         */
        this.indicatorColor = 'rgba(0, 0, 0, .3)';
        /**
         * 当前选中的指示点颜色
         */
        this.indicatorActiveColor = '#000000';
        /**
         * 是否自动切换
         */
        this.autoplay = false;
        /**
         * 当前所在滑块的 index
         */
        this.current = 0;
        /**
         * 自动切换时间间隔
         */
        this.interval = 5000;
        /**
         * 滑动动画时长
         */
        this.duration = 500;
        /**
         * 是否采用衔接滑动
         */
        this.circular = false;
        /**
         * 滑动方向是否为纵向
         */
        this.vertical = false;
        /**
         * 前边距，可用于露出前一项的一小部分，接受 px 值
         */
        this.previousMargin = '0px';
        /**
         * 后边距，可用于露出后一项的一小部分，接受 px 值
         */
        this.nextMargin = '0px';
        /**
         * 同时显示的滑块数量
         */
        this.displayMultipleItems = 1;
        /**
         * 给 prewviewImage API 使用，全屏显示 swiper
         */
        this.full = false;
    }
    watchCurrent(newVal) {
        const n = parseInt(newVal, 10);
        if (isNaN(n))
            return;
        if (this.circular) {
            this.swiper.slideToLoop(n); // 更新下标
        }
        else {
            this.swiper.slideTo(n); // 更新下标
        }
    }
    watchAutoplay(newVal) {
        if (this.swiper.autoplay.running === newVal)
            return;
        if (newVal) {
            if (this.swiper.params.autoplay.disableOnInteraction === true) {
                this.swiper.params.autoplay.disableOnInteraction = false;
            }
            this.swiper.params.autoplay.delay = this.interval;
            this.swiper.autoplay.start();
        }
        else {
            this.swiper.autoplay.stop();
        }
    }
    watchDuration(newVal) {
        this.swiper.params.speed = newVal;
    }
    watchInterval(newVal) {
        this.swiper.params.autoplay.delay = newVal;
    }
    componentDidLoad() {
        const { autoplay, current, interval, duration, circular, vertical, displayMultipleItems } = this;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const that = this;
        const options = {
            pagination: { el: `.taro-swiper-${this._id} > .swiper-container > .swiper-pagination` },
            direction: vertical ? 'vertical' : 'horizontal',
            loop: circular,
            slidesPerView: displayMultipleItems,
            initialSlide: current,
            speed: duration,
            observer: true,
            observeParents: true,
            on: {
                // slideChange 事件在 swiper.slideTo 改写 current 时不触发，因此用 slideChangeTransitionEnd 事件代替
                slideChangeTransitionEnd() {
                    that.onChange.emit({
                        current: this.realIndex,
                        source: ''
                    });
                },
                transitionEnd() {
                    that.onAnimationFinish.emit({
                        current: this.realIndex,
                        source: ''
                    });
                },
                observerUpdate(e) {
                    if (e.target && e.target.className === 'taro_page' && e.target.style.display === 'block') {
                        if (that.autoplay && e.target.contains(this.$el[0])) {
                            this.slideTo(that.current);
                        }
                    }
                }
            }
        };
        // 自动播放
        if (autoplay) {
            options.autoplay = {
                delay: interval,
                disableOnInteraction: false
            };
        }
        this.swiper = new Swipers(`.taro-swiper-${this._id} > .swiper-container`, options);
    }
    componentWillUpdate() {
        if (this.autoplay && !this.swiper.autoplay.paused) {
            this.swiper.autoplay.run();
            this.swiper.autoplay.paused = false;
        }
        this.swiper.update(); // 更新子元素
    }
    render() {
        const { vertical, indicatorDots, indicatorColor, indicatorActiveColor } = this;
        const hostStyle = { overflow: 'hidden' };
        const style = { overflow: 'visible' };
        if (this.full) {
            hostStyle.height = '100%';
            style.height = '100%';
        }
        const [, previousMargin] = /^(\d+)px/.exec(this.previousMargin) || [];
        const [, nextMargin] = /^(\d+)px/.exec(this.nextMargin) || [];
        const pM = parseInt(previousMargin) || 0;
        const nM = parseInt(nextMargin) || 0;
        if (vertical) {
            style.marginTop = `${pM}px`;
            style.marginBottom = `${nM}px`;
        }
        else {
            style.marginRight = `${nM}px`;
            style.marginLeft = `${pM}px`;
        }
        return (h(Host, { class: `taro-swiper-${this._id}`, style: hostStyle },
            h("div", { class: 'swiper-container', style: style },
                h("style", { type: 'text/css' }, `
              .taro-swiper-${this._id} > .swiper-container > .swiper-pagination > .swiper-pagination-bullet { background: ${indicatorColor} }
              .taro-swiper-${this._id} > .swiper-container > .swiper-pagination > .swiper-pagination-bullet-active { background: ${indicatorActiveColor} }
            `),
                h("div", { class: 'swiper-wrapper' },
                    h("slot", null)),
                h("div", { class: classNames('swiper-pagination', {
                        'swiper-pagination-hidden': !indicatorDots,
                        'swiper-pagination-bullets': indicatorDots
                    }) }))));
    }
    static get is() { return "taro-swiper-core"; }
    static get originalStyleUrls() { return {
        "$": ["../../../node_modules/swiper/dist/css/swiper.min.css", "./style/index.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["../../../node_modules/swiper/dist/css/swiper.min.css", "style/index.css"]
    }; }
    static get properties() { return {
        "indicatorDots": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u663E\u793A\u9762\u677F\u6307\u793A\u70B9"
            },
            "attribute": "indicator-dots",
            "reflect": false,
            "defaultValue": "false"
        },
        "indicatorColor": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u6307\u793A\u70B9\u989C\u8272"
            },
            "attribute": "indicator-color",
            "reflect": false,
            "defaultValue": "'rgba(0, 0, 0, .3)'"
        },
        "indicatorActiveColor": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u5F53\u524D\u9009\u4E2D\u7684\u6307\u793A\u70B9\u989C\u8272"
            },
            "attribute": "indicator-active-color",
            "reflect": false,
            "defaultValue": "'#000000'"
        },
        "autoplay": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u81EA\u52A8\u5207\u6362"
            },
            "attribute": "autoplay",
            "reflect": false,
            "defaultValue": "false"
        },
        "current": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u5F53\u524D\u6240\u5728\u6ED1\u5757\u7684 index"
            },
            "attribute": "current",
            "reflect": false,
            "defaultValue": "0"
        },
        "interval": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u81EA\u52A8\u5207\u6362\u65F6\u95F4\u95F4\u9694"
            },
            "attribute": "interval",
            "reflect": false,
            "defaultValue": "5000"
        },
        "duration": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u6ED1\u52A8\u52A8\u753B\u65F6\u957F"
            },
            "attribute": "duration",
            "reflect": false,
            "defaultValue": "500"
        },
        "circular": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u91C7\u7528\u8854\u63A5\u6ED1\u52A8"
            },
            "attribute": "circular",
            "reflect": false,
            "defaultValue": "false"
        },
        "vertical": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u6ED1\u52A8\u65B9\u5411\u662F\u5426\u4E3A\u7EB5\u5411"
            },
            "attribute": "vertical",
            "reflect": false,
            "defaultValue": "false"
        },
        "previousMargin": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u524D\u8FB9\u8DDD\uFF0C\u53EF\u7528\u4E8E\u9732\u51FA\u524D\u4E00\u9879\u7684\u4E00\u5C0F\u90E8\u5206\uFF0C\u63A5\u53D7 px \u503C"
            },
            "attribute": "previous-margin",
            "reflect": false,
            "defaultValue": "'0px'"
        },
        "nextMargin": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u540E\u8FB9\u8DDD\uFF0C\u53EF\u7528\u4E8E\u9732\u51FA\u540E\u4E00\u9879\u7684\u4E00\u5C0F\u90E8\u5206\uFF0C\u63A5\u53D7 px \u503C"
            },
            "attribute": "next-margin",
            "reflect": false,
            "defaultValue": "'0px'"
        },
        "displayMultipleItems": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u540C\u65F6\u663E\u793A\u7684\u6ED1\u5757\u6570\u91CF"
            },
            "attribute": "display-multiple-items",
            "reflect": false,
            "defaultValue": "1"
        },
        "full": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u7ED9 prewviewImage API \u4F7F\u7528\uFF0C\u5168\u5C4F\u663E\u793A swiper"
            },
            "attribute": "full",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "onChange",
            "name": "change",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "onAnimationFinish",
            "name": "animationfinish",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get watchers() { return [{
            "propName": "current",
            "methodName": "watchCurrent"
        }, {
            "propName": "autoplay",
            "methodName": "watchAutoplay"
        }, {
            "propName": "duration",
            "methodName": "watchDuration"
        }, {
            "propName": "interval",
            "methodName": "watchInterval"
        }]; }
}

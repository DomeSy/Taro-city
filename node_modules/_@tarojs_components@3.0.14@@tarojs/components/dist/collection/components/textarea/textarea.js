// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { h } from "@stencil/core";
function fixControlledValue(value) {
    return value !== null && value !== void 0 ? value : '';
}
export class Textarea {
    constructor() {
        this.disabled = false;
        this.maxlength = 140;
        this.autoFocus = false;
        this.hanldeInput = (e) => {
            e.stopPropagation();
            this.onInput.emit({
                value: e.target.value,
                cursor: e.target.value.length
            });
        };
        this.handleFocus = (e) => {
            this.onFocus.emit({
                value: e.target.value
            });
        };
        this.handleBlur = (e) => {
            this.onBlur.emit({
                value: e.target.value
            });
        };
        this.handleChange = (e) => {
            e.stopPropagation();
            this.onChange.emit({
                value: e.target.value
            });
        };
    }
    componentDidLoad() {
        Object.defineProperty(this.el, 'value', {
            get: () => this.textareaRef.value,
            set: value => (this.value = value),
            configurable: true
        });
        this.autoFocus && this.textareaRef.focus();
    }
    render() {
        const { value, placeholder, disabled, maxlength, autoFocus, name, hanldeInput, handleFocus, handleBlur, handleChange } = this;
        return (h("textarea", { ref: input => {
                if (input) {
                    this.textareaRef = input;
                }
            }, class: 'taro-textarea', value: fixControlledValue(value), placeholder: placeholder, name: name, disabled: disabled, maxlength: maxlength, autofocus: autoFocus, onInput: hanldeInput, onFocus: handleFocus, onBlur: handleBlur, onChange: handleChange }));
    }
    static get is() { return "taro-textarea-core"; }
    static get originalStyleUrls() { return {
        "$": ["./style/index.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["style/index.css"]
    }; }
    static get properties() { return {
        "value": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "value",
            "reflect": false
        },
        "placeholder": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "placeholder",
            "reflect": false
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "maxlength": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "maxlength",
            "reflect": false,
            "defaultValue": "140"
        },
        "autoFocus": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "auto-focus",
            "reflect": false,
            "defaultValue": "false"
        },
        "name": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "name",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "onInput",
            "name": "input",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "onFocus",
            "name": "focus",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "onBlur",
            "name": "blur",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "onChange",
            "name": "change",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { h, Host } from "@stencil/core";
import classNames from 'classnames';
import { formatTime, calcDist, normalizeNumber, throttle } from './utils';
export class Video {
    constructor() {
        this.currentTime = 0;
        this.isDraggingProgress = false;
        this.gestureType = 'none';
        /**
         * 是否显示默认播放控件（播放/暂停按钮、播放进度、时间）
         */
        this.controls = true;
        /**
         * 是否自动播放
         */
        this.autoplay = false;
        /**
         * 是否循环播放
         */
        this.loop = false;
        /**
         * 是否静音播放
         */
        this.muted = false;
        /**
         * 指定视频初始播放位置
         */
        this.initialTime = 0;
        /**
         * 当视频大小与 video 容器大小不一致时，视频的表现形式
         */
        this.objectFit = 'contain';
        this.showProgress = true;
        /**
         * 是否显示全屏按钮
         */
        this.showFullscreenBtn = true;
        /**
         * 是否显示视频底部控制栏的播放按钮
         */
        this.showPlayBtn = true;
        /**
         * 是否显示视频中间的播放按钮
         */
        this.showCenterPlayBtn = true;
        /**
         * 是否显示静音按钮
         */
        this.showMuteBtn = false;
        /**
         * 是否显示弹幕按钮
         */
        this.danmuBtn = false;
        /**
         * 是否展示弹幕
         */
        this.enableDanmu = false;
        /**
         * 是否开启播放手势，即双击切换播放/暂停
         */
        this.enablePlayGesture = false;
        /**
         * 是否开启控制进度的手势
         */
        this.enableProgressGesture = true;
        /**
         * 在非全屏模式下，是否开启亮度与音量调节手势
         */
        this.vslideGesture = false;
        /**
         * 在全屏模式下，是否开启亮度与音量调节手势
         */
        this.vslideGestureInFullscreen = true;
        this._enableDanmu = false;
        this.isPlaying = false;
        this.isFirst = true;
        this.isFullScreen = false;
        this.isMute = false;
        this.analyseGesture = (e) => {
            var _a;
            const obj = {
                type: 'none'
            };
            const nowX = e.touches[0].screenX;
            const nowY = e.touches[0].screenY;
            const distX = nowX - this.lastTouchScreenX;
            const distY = nowY - this.lastTouchScreenY;
            const enableVslideGesture = this.isFullScreen ? this.vslideGestureInFullscreen : this.vslideGesture;
            if (this.gestureType === 'none') {
                // 两点间距离
                const dist = calcDist(distX, distY);
                // 没有移动
                if (dist < 10)
                    return obj;
                if (Math.abs(distY) >= Math.abs(distX)) {
                    // 垂直方向移动：调整音量
                    if (enableVslideGesture) {
                        this.gestureType = 'adjustVolume';
                        this.lastVolume = this.videoRef.volume;
                    }
                    else {
                        return obj;
                    }
                }
                else if (Math.abs(distY) < Math.abs(distX)) {
                    // 水平方向移动：调整进度
                    if (this.enableProgressGesture) {
                        this.gestureType = 'adjustProgress';
                        this.lastPercentage = this.currentTime / ((_a = this.duration) !== null && _a !== void 0 ? _a : this._duration);
                    }
                    else {
                        return obj;
                    }
                }
            }
            obj.type = this.gestureType;
            obj.dataX = normalizeNumber(distX / 200);
            obj.dataY = normalizeNumber(distY / 200);
            return obj;
        };
        this.handlePlay = () => {
            this.isPlaying = true;
            this.isFirst = false;
            this.controlsRef.toggleVisibility(true);
            this.onPlay.emit();
        };
        this.handlePause = () => {
            this.isPlaying = false;
            this.controlsRef.toggleVisibility(true);
            this.onPause.emit();
        };
        this.handleEnded = () => {
            this.isFirst = true;
            this.pause();
            this.controlsRef.toggleVisibility();
            this.onEnded.emit();
        };
        this.handleTimeUpdate = throttle(async (e) => {
            var _a, _b;
            this.currentTime = this.videoRef.currentTime;
            const duration = this.duration || this._duration;
            const isControlDragging = await this.controlsRef.getIsDraggingProgressBall();
            if (this.controls && this.showProgress) {
                if (!isControlDragging && !this.isDraggingProgress) {
                    this.controlsRef.setProgressBall(this.currentTime / duration);
                    this.controlsRef.setCurrentTime(this.currentTime);
                }
            }
            this.danmuRef.tick(this.currentTime);
            this.onTimeUpdate.emit({
                duration: (_a = e.target) === null || _a === void 0 ? void 0 : _a.duration,
                currentTime: (_b = e.target) === null || _b === void 0 ? void 0 : _b.currentTime
            });
            if (this.duration) {
                if (this.currentTime >= this.duration) {
                    this.seek(0);
                    this.handleEnded();
                }
            }
        }, 250);
        this.handleError = e => {
            var _a, _b;
            this.onError.emit({
                errMsg: (_b = (_a = e.target) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.message
            });
        };
        this.handleDurationChange = () => {
            this._duration = this.videoRef.duration;
        };
        this.handleProgress = () => {
            this.onProgress.emit();
        };
        this.handleLoadedMetaData = (e) => {
            const target = e.target;
            this.onLoadedMetaData.emit({
                width: target.videoWidth,
                height: target.videoHeight,
                duration: target.duration
            });
        };
        this.play = () => {
            this.videoRef.play();
        };
        this.pause = () => {
            this.videoRef.pause();
        };
        this.stop = () => {
            this.videoRef.pause();
            this.seek(0);
        };
        this.seek = (position) => {
            this.videoRef.currentTime = position;
        };
        this.onTouchStartContainer = (e) => {
            this.lastTouchScreenX = e.touches[0].screenX;
            this.lastTouchScreenY = e.touches[0].screenY;
        };
        this.onClickContainer = () => {
            if (this.enablePlayGesture) {
                const now = Date.now();
                if (now - this.lastClickedTime < 300) {
                    // 双击
                    this.isPlaying ? this.pause() : this.play();
                }
                this.lastClickedTime = now;
            }
            this.controlsRef.toggleVisibility();
        };
        this.onClickFullScreenBtn = (e) => {
            e.stopPropagation();
            this.toggleFullScreen();
        };
        this.toggleFullScreen = (nextFullScreenState) => {
            const isFullScreen = nextFullScreenState === undefined ? !this.isFullScreen : nextFullScreenState;
            this.isFullScreen = isFullScreen;
            this.controlsRef.toggleVisibility(true);
            this.onFullScreenChange.emit({
                fullScreen: isFullScreen,
                direction: 'vertical'
            });
        };
        this.toggleMute = (e) => {
            e.stopPropagation();
            this.videoRef.muted = !this.isMute;
            this.controlsRef.toggleVisibility(true);
            this.isMute = !this.isMute;
        };
        this.toggleDanmu = (e) => {
            e.stopPropagation();
            this.controlsRef.toggleVisibility(true);
            this._enableDanmu = !this._enableDanmu;
        };
    }
    componentWillLoad() {
        this._enableDanmu = this.enableDanmu;
    }
    componentDidLoad() {
        if (this.initialTime) {
            this.videoRef.currentTime = this.initialTime;
        }
        // 目前只支持 danmuList 初始化弹幕列表，还未支持更新弹幕列表
        this.danmuRef.sendDanmu(this.danmuList);
    }
    componentDidRender() {
        const parentElement = this.el.parentElement;
        const parentTagName = parentElement.tagName;
        if (this.isFullScreen) {
            if (parentTagName !== 'BODY') {
                parentElement.removeChild(this.el);
                document.body.appendChild(this.el);
            }
        }
        else {
            if (parentTagName !== 'DIV' || !parentElement.className.includes('taro-video')) {
                if (!this.wrapperElement) {
                    const container = document.createElement('div');
                    container.className = 'taro-video';
                    parentElement.removeChild(this.el);
                    container.appendChild(this.el);
                    parentElement.appendChild(container);
                    this.wrapperElement = container;
                }
                else {
                    parentElement.removeChild(this.el);
                    this.wrapperElement.appendChild(this.el);
                }
            }
        }
    }
    watchEnableDanmu(newVal) {
        this._enableDanmu = newVal;
    }
    async onDocumentTouchMove(e) {
        if (this.lastTouchScreenX === undefined || this.lastTouchScreenY === undefined)
            return;
        if (await this.controlsRef.getIsDraggingProgressBall())
            return;
        const gestureObj = this.analyseGesture(e);
        if (gestureObj.type === 'adjustVolume') {
            this.toastVolumeRef.style.visibility = 'visible';
            const nextVolume = Math.max(Math.min(this.lastVolume - gestureObj.dataY, 1), 0);
            this.videoRef.volume = nextVolume;
            this.toastVolumeBarRef.style.width = `${nextVolume * 100}%`;
        }
        else if (gestureObj.type === 'adjustProgress') {
            this.isDraggingProgress = true;
            this.nextPercentage = Math.max(Math.min(this.lastPercentage + gestureObj.dataX, 1), 0);
            if (this.controls && this.showProgress) {
                this.controlsRef.setProgressBall(this.nextPercentage);
                this.controlsRef.toggleVisibility(true);
            }
            const duration = this.duration || this._duration;
            this.toastProgressTitleRef.innerHTML = `${formatTime(this.nextPercentage * duration)} / ${formatTime(duration)}`;
            this.toastProgressRef.style.visibility = 'visible';
        }
    }
    onDocumentTouchEnd() {
        var _a;
        if (this.gestureType === 'adjustVolume') {
            this.toastVolumeRef.style.visibility = 'hidden';
        }
        else if (this.gestureType === 'adjustProgress') {
            this.toastProgressRef.style.visibility = 'hidden';
        }
        if (this.isDraggingProgress) {
            this.isDraggingProgress = false;
            this.seek(this.nextPercentage * ((_a = this.duration) !== null && _a !== void 0 ? _a : this._duration));
        }
        this.gestureType = 'none';
        this.lastTouchScreenX = undefined;
        this.lastTouchScreenY = undefined;
    }
    render() {
        const { src, controls, autoplay, loop, muted, poster, objectFit, isFirst, isMute, isFullScreen, duration, _duration, showCenterPlayBtn, isPlaying, _enableDanmu, showMuteBtn, danmuBtn, showFullscreenBtn } = this;
        const durationTime = formatTime(duration || _duration || null);
        return (h(Host, { class: classNames('taro-video-container', {
                'taro-video-type-fullscreen': isFullScreen
            }), onTouchStart: this.onTouchStartContainer, onClick: this.onClickContainer },
            h("video", { class: 'taro-video-video', style: {
                    'object-fit': objectFit
                }, ref: dom => (this.videoRef = dom), src: src, autoplay: autoplay, loop: loop, muted: muted, poster: controls ? poster : undefined, playsinline: true, "webkit-playsinline": true, onPlay: this.handlePlay, onPause: this.handlePause, onEnded: this.handleEnded, onTimeUpdate: this.handleTimeUpdate, onError: this.handleError, onDurationChange: this.handleDurationChange, onProgress: this.handleProgress, onLoadedMetaData: this.handleLoadedMetaData }, "\u6682\u65F6\u4E0D\u652F\u6301\u64AD\u653E\u8BE5\u89C6\u9891"),
            h("taro-video-control", { ref: dom => {
                    if (dom) {
                        this.controlsRef = dom;
                    }
                }, controls: controls, currentTime: this.currentTime, duration: this.duration || this._duration || undefined, isPlaying: this.isPlaying, pauseFunc: this.pause, playFunc: this.play, seekFunc: this.seek, showPlayBtn: this.showPlayBtn, showProgress: this.showProgress },
                showMuteBtn && (h("div", { class: classNames('taro-video-mute', {
                        'taro-video-type-mute': isMute
                    }), onClick: this.toggleMute })),
                danmuBtn && (h("div", { class: classNames('taro-video-danmu-button', {
                        'taro-video-danmu-button-active': _enableDanmu
                    }), onClick: this.toggleDanmu }, "\u5F39\u5E55")),
                showFullscreenBtn && (h("div", { class: classNames('taro-video-fullscreen', {
                        'taro-video-type-fullscreen': isFullScreen
                    }), onClick: this.onClickFullScreenBtn }))),
            h("taro-video-danmu", { ref: dom => {
                    if (dom) {
                        this.danmuRef = dom;
                    }
                }, enable: _enableDanmu }),
            isFirst && showCenterPlayBtn && !isPlaying && (h("div", { class: 'taro-video-cover' },
                h("div", { class: 'taro-video-cover-play-button', onClick: this.play }),
                h("p", { class: 'taro-video-cover-duration' }, durationTime))),
            h("div", { class: 'taro-video-toast taro-video-toast-volume', ref: dom => {
                    if (dom) {
                        this.toastVolumeRef = dom;
                    }
                } },
                h("div", { class: 'taro-video-toast-title' }, "\u97F3\u91CF"),
                h("div", { class: 'taro-video-toast-icon' }),
                h("div", { class: 'taro-video-toast-value' },
                    h("div", { class: 'taro-video-toast-value-content', ref: dom => {
                            if (dom) {
                                this.toastVolumeBarRef = dom;
                            }
                        } },
                        h("div", { class: 'taro-video-toast-volume-grids' }, Array(10).fill(1).map(() => (h("div", { class: 'taro-video-toast-volume-grids-item' }))))))),
            h("div", { class: 'taro-video-toast taro-video-toast-progress', ref: dom => {
                    if (dom) {
                        this.toastProgressRef = dom;
                    }
                } },
                h("div", { class: 'taro-video-toast-title', ref: dom => {
                        if (dom) {
                            this.toastProgressTitleRef = dom;
                        }
                    } }))));
    }
    static get is() { return "taro-video-core"; }
    static get originalStyleUrls() { return {
        "$": ["./style/index.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["style/index.css"]
    }; }
    static get properties() { return {
        "src": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u8981\u64AD\u653E\u89C6\u9891\u7684\u8D44\u6E90\u5730\u5740"
            },
            "attribute": "src",
            "reflect": false
        },
        "duration": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u6307\u5B9A\u89C6\u9891\u65F6\u957F"
            },
            "attribute": "duration",
            "reflect": false
        },
        "controls": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u663E\u793A\u9ED8\u8BA4\u64AD\u653E\u63A7\u4EF6\uFF08\u64AD\u653E/\u6682\u505C\u6309\u94AE\u3001\u64AD\u653E\u8FDB\u5EA6\u3001\u65F6\u95F4\uFF09"
            },
            "attribute": "controls",
            "reflect": false,
            "defaultValue": "true"
        },
        "autoplay": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u81EA\u52A8\u64AD\u653E"
            },
            "attribute": "autoplay",
            "reflect": false,
            "defaultValue": "false"
        },
        "loop": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u5FAA\u73AF\u64AD\u653E"
            },
            "attribute": "loop",
            "reflect": false,
            "defaultValue": "false"
        },
        "muted": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u9759\u97F3\u64AD\u653E"
            },
            "attribute": "muted",
            "reflect": false,
            "defaultValue": "false"
        },
        "initialTime": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u6307\u5B9A\u89C6\u9891\u521D\u59CB\u64AD\u653E\u4F4D\u7F6E"
            },
            "attribute": "initial-time",
            "reflect": false,
            "defaultValue": "0"
        },
        "poster": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u89C6\u9891\u5C01\u9762\u7684\u56FE\u7247\u7F51\u7EDC\u8D44\u6E90\u5730\u5740\u6216\u4E91\u6587\u4EF6ID\uFF082.3.0\uFF09\u3002\u82E5 controls \u5C5E\u6027\u503C\u4E3A false \u5219\u8BBE\u7F6E poster \u65E0\u6548"
            },
            "attribute": "poster",
            "reflect": false
        },
        "objectFit": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'contain' | 'fill' | 'cover'",
                "resolved": "\"contain\" | \"cover\" | \"fill\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u5F53\u89C6\u9891\u5927\u5C0F\u4E0E video \u5BB9\u5668\u5927\u5C0F\u4E0D\u4E00\u81F4\u65F6\uFF0C\u89C6\u9891\u7684\u8868\u73B0\u5F62\u5F0F"
            },
            "attribute": "object-fit",
            "reflect": false,
            "defaultValue": "'contain'"
        },
        "showProgress": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "show-progress",
            "reflect": false,
            "defaultValue": "true"
        },
        "showFullscreenBtn": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u663E\u793A\u5168\u5C4F\u6309\u94AE"
            },
            "attribute": "show-fullscreen-btn",
            "reflect": false,
            "defaultValue": "true"
        },
        "showPlayBtn": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u663E\u793A\u89C6\u9891\u5E95\u90E8\u63A7\u5236\u680F\u7684\u64AD\u653E\u6309\u94AE"
            },
            "attribute": "show-play-btn",
            "reflect": false,
            "defaultValue": "true"
        },
        "showCenterPlayBtn": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u663E\u793A\u89C6\u9891\u4E2D\u95F4\u7684\u64AD\u653E\u6309\u94AE"
            },
            "attribute": "show-center-play-btn",
            "reflect": false,
            "defaultValue": "true"
        },
        "showMuteBtn": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u663E\u793A\u9759\u97F3\u6309\u94AE"
            },
            "attribute": "show-mute-btn",
            "reflect": false,
            "defaultValue": "false"
        },
        "danmuList": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "[]",
                "resolved": "[]",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u5F39\u5E55\u5217\u8868"
            }
        },
        "danmuBtn": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u663E\u793A\u5F39\u5E55\u6309\u94AE"
            },
            "attribute": "danmu-btn",
            "reflect": false,
            "defaultValue": "false"
        },
        "enableDanmu": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u5C55\u793A\u5F39\u5E55"
            },
            "attribute": "enable-danmu",
            "reflect": false,
            "defaultValue": "false"
        },
        "enablePlayGesture": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u5F00\u542F\u64AD\u653E\u624B\u52BF\uFF0C\u5373\u53CC\u51FB\u5207\u6362\u64AD\u653E/\u6682\u505C"
            },
            "attribute": "enable-play-gesture",
            "reflect": false,
            "defaultValue": "false"
        },
        "enableProgressGesture": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u662F\u5426\u5F00\u542F\u63A7\u5236\u8FDB\u5EA6\u7684\u624B\u52BF"
            },
            "attribute": "enable-progress-gesture",
            "reflect": false,
            "defaultValue": "true"
        },
        "vslideGesture": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u5728\u975E\u5168\u5C4F\u6A21\u5F0F\u4E0B\uFF0C\u662F\u5426\u5F00\u542F\u4EAE\u5EA6\u4E0E\u97F3\u91CF\u8C03\u8282\u624B\u52BF"
            },
            "attribute": "vslide-gesture",
            "reflect": false,
            "defaultValue": "false"
        },
        "vslideGestureInFullscreen": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "\u5728\u5168\u5C4F\u6A21\u5F0F\u4E0B\uFF0C\u662F\u5426\u5F00\u542F\u4EAE\u5EA6\u4E0E\u97F3\u91CF\u8C03\u8282\u624B\u52BF"
            },
            "attribute": "vslide-gesture-in-fullscreen",
            "reflect": false,
            "defaultValue": "true"
        }
    }; }
    static get states() { return {
        "_duration": {},
        "_enableDanmu": {},
        "isPlaying": {},
        "isFirst": {},
        "isFullScreen": {},
        "isMute": {}
    }; }
    static get events() { return [{
            "method": "onPlay",
            "name": "play",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "onPause",
            "name": "pause",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "onEnded",
            "name": "ended",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "onTimeUpdate",
            "name": "timeupdate",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "onError",
            "name": "error",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "onFullScreenChange",
            "name": "fullscreenchange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "onProgress",
            "name": "progress",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "onLoadedMetaData",
            "name": "loadedmetadata",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "enableDanmu",
            "methodName": "watchEnableDanmu"
        }]; }
    static get listeners() { return [{
            "name": "touchmove",
            "method": "onDocumentTouchMove",
            "target": "document",
            "capture": false,
            "passive": true
        }, {
            "name": "touchend",
            "method": "onDocumentTouchEnd",
            "target": "document",
            "capture": false,
            "passive": true
        }, {
            "name": "touchcancel",
            "method": "onDocumentTouchEnd",
            "target": "document",
            "capture": false,
            "passive": true
        }]; }
}

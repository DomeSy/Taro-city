import { r as registerInstance, c as createEvent, h, H as Host } from './core-de9c9c2d.js';
import { c as classNames } from './index-be61bb74.js';
var Taro = require('@tarojs/taro');
var Navigator = /** @class */ (function () {
    function Navigator(hostRef) {
        registerInstance(this, hostRef);
        this.openType = 'navigate';
        this.isHover = false;
        this.delta = 0;
        this.onSuccess = createEvent(this, "cuccess", 7);
        this.onFail = createEvent(this, "fail", 7);
        this.onComplete = createEvent(this, "Complete", 7);
    }
    Navigator.prototype.onClick = function () {
        var _a = this, openType = _a.openType, onSuccess = _a.onSuccess, onFail = _a.onFail, onComplete = _a.onComplete;
        var promise = Promise.resolve();
        switch (openType) {
            case 'navigate':
                promise = Taro.navigateTo({
                    url: this.url
                });
                break;
            case 'redirect':
                promise = Taro.redirectTo({
                    url: this.url
                });
                break;
            case 'switchTab':
                promise = Taro.switchTab({
                    url: this.url
                });
                break;
            case 'reLaunch':
                promise = Taro.reLaunch({
                    url: this.url
                });
                break;
            case 'navigateBack':
                promise = Taro.navigateBack({
                    delta: this.delta
                });
                break;
            case 'exit':
                promise = Promise.reject(new Error('navigator:fail 暂不支持"openType: exit"'));
                break;
        }
        if (promise) {
            promise.then(function (res) {
                onSuccess.emit(res);
            }).catch(function (res) {
                onFail.emit(res);
            }).finally(function () {
                onComplete.emit();
            });
        }
    };
    Navigator.prototype.render = function () {
        var _a;
        var _b = this, isHover = _b.isHover, hoverClass = _b.hoverClass;
        return (h(Host, { class: classNames((_a = {},
                _a[hoverClass] = isHover,
                _a)) }));
    };
    Object.defineProperty(Navigator, "style", {
        get: function () { return ".navigator-hover{background:#efefef}"; },
        enumerable: true,
        configurable: true
    });
    return Navigator;
}());
export { Navigator as taro_navigator_core };

import { r as registerInstance, c as createEvent, h, H as Host } from './core-de9c9c2d.js';
import { c as classNames } from './index-be61bb74.js';

import('./intersection-observer-8e4c7135.js');
const Image = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.mode = 'scaleToFill';
        this.lazyLoad = false;
        this.aspectFillMode = 'width';
        this.onLoad = createEvent(this, "load", 7);
        this.onError = createEvent(this, "error", 7);
    }
    componentDidLoad() {
        if (!this.lazyLoad)
            return;
        const lazyImg = new IntersectionObserver(entries => {
            // 异步 api 关系
            if (entries[entries.length - 1].isIntersecting) {
                lazyImg.unobserve(this.imgRef);
                this.imgRef.src = this.src;
            }
        }, {
            rootMargin: '300px 0px'
        });
        lazyImg.observe(this.imgRef);
    }
    imageOnLoad() {
        const { width, height, naturalWidth, naturalHeight } = this.imgRef;
        this.onLoad.emit({
            width,
            height
        });
        this.aspectFillMode = naturalWidth > naturalHeight ? 'width' : 'height';
    }
    imageOnError() {
        this.onError.emit();
    }
    render() {
        const { src, mode, lazyLoad, aspectFillMode, imageOnLoad, imageOnError } = this;
        const cls = classNames({
            'taro-img__widthfix': mode === 'widthFix'
        });
        const imgCls = classNames(`taro-img__mode-${mode.toLowerCase().replace(/\s/g, '')}`, {
            [`taro-img__mode-aspectfill--${aspectFillMode}`]: mode === 'aspectFill'
        });
        return (h(Host, { class: cls }, lazyLoad ? (h("img", { ref: img => (this.imgRef = img), class: imgCls, onLoad: imageOnLoad.bind(this), onError: imageOnError.bind(this) })) : (h("img", { ref: img => (this.imgRef = img), class: imgCls, src: src, onLoad: imageOnLoad.bind(this), onError: imageOnError.bind(this) }))));
    }
    static get style() { return "img[src=\"\"]{opacity:0}taro-image-core{display:inline-block;overflow:hidden;position:relative;font-size:0;width:320px;height:240px}.taro-img.taro-img__widthfix{height:100%}.taro-img__mode-scaletofill{width:100%;height:100%}.taro-img__mode-aspectfit{max-width:100%;max-height:100%}.taro-img__mode-aspectfill{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.taro-img__mode-aspectfill--width{min-width:100%;height:100%}.taro-img__mode-aspectfill--height{width:100%;min-height:100%}.taro-img__mode-top,.taro-img__mode-widthfix{width:100%}.taro-img__mode-bottom{width:100%;position:absolute;bottom:0}.taro-img__mode-left{height:100%}.taro-img__mode-right{height:100%}.taro-img__mode-right,.taro-img__mode-topright{position:absolute;right:0}.taro-img__mode-bottomleft{position:absolute;bottom:0}.taro-img__mode-bottomright{position:absolute;right:0;bottom:0}"; }
};

export { Image as taro_image_core };

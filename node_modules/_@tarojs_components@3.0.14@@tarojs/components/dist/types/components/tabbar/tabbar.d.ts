import { ComponentInterface, EventEmitter } from '../../stencil.core';
interface RouterHandler {
    index: string;
    text: string;
    url: string;
    successHandler: Function;
    errorHandler: Function;
    animation?: boolean;
}
export interface Conf {
    color: string;
    selectedColor: string;
    backgroundColor: string;
    borderStyle?: 'black' | 'white';
    list: TabbarList[];
    position?: 'bottom' | 'top';
    custom: boolean;
    customRoutes: Record<string, string>;
    mode: 'hash' | 'browser';
    basename: string;
    homePage: string;
    currentPagename: string;
}
interface TabbarList {
    pagePath: string;
    text: string;
    iconPath?: string;
    selectedIconPath?: string;
    badgeText?: string;
    showRedDot?: boolean;
}
export declare class Tabbar implements ComponentInterface {
    private homePage;
    private customRoutes;
    private tabbarPos;
    conf: Conf;
    list: TabbarList[];
    selectedIndex: number;
    status: 0 | 1 | 2;
    onLongPress: EventEmitter;
    tabbar: HTMLDivElement;
    constructor();
    getCurrentUrl(): any;
    getOriginUrl: (url: string) => string;
    getSelectedIndex: (url: string) => number;
    switchTab: (index: number) => void;
    switchTabHandler: ({ url, successHandler, errorHandler }: RouterHandler) => void;
    routerChangeHandler: (options?: any) => void;
    setTabBarBadgeHandler: ({ index, text, errorHandler }: RouterHandler) => void;
    removeTabBarBadgeHandler: ({ index, successHandler, errorHandler }: RouterHandler) => void;
    showTabBarRedDotHandler: ({ index, successHandler, errorHandler }: RouterHandler) => void;
    hideTabBarRedDotHandler: ({ index, successHandler, errorHandler }: RouterHandler) => void;
    showTabBarHandler: ({ successHandler }: {
        successHandler: any;
    }) => void;
    hideTabBarHandler: ({ animation, successHandler }: {
        animation: any;
        successHandler: any;
    }) => void;
    bindEvent(): void;
    removeEvent(): void;
    componentDidLoad(): void;
    componentDidUnload(): void;
    render(): any;
}
export {};

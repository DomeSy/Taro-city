"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TaroNormalModule_1 = require("./TaroNormalModule");
const TaroSingleEntryDependency_1 = require("../dependencies/TaroSingleEntryDependency");
const component_1 = require("../template/component");
const walk = require('acorn-walk');
const PLUGIN_NAME = 'TaroNormalModulesPlugin';
class TaroNormalModulesPlugin {
    apply(compiler) {
        compiler.hooks.compilation.tap(PLUGIN_NAME, (_, { normalModuleFactory }) => {
            normalModuleFactory.hooks.createModule.tap(PLUGIN_NAME, data => {
                const dependency = data.dependencies[0];
                if (dependency.constructor === TaroSingleEntryDependency_1.default) {
                    return new TaroNormalModule_1.default(Object.assign(data, { miniType: dependency.miniType, name: dependency.name }));
                }
            });
            if (component_1.componentConfig.thirdPartyComponents.size === 0) {
                return;
            }
            // react 的第三方组件支持
            normalModuleFactory.hooks.parser.for('javascript/auto').tap(PLUGIN_NAME, (parser) => {
                parser.hooks.program.tap(PLUGIN_NAME, (ast) => {
                    walk.simple(ast, {
                        CallExpression(node) {
                            const callee = node.callee;
                            if (callee.type !== 'MemberExpression') {
                                return;
                            }
                            if (callee.property.name !== 'createElement') {
                                return;
                            }
                            const [type, prop] = node.arguments;
                            const attrs = component_1.componentConfig.thirdPartyComponents.get(type.value);
                            if (attrs == null || !prop || prop.type !== 'ObjectExpression') {
                                return;
                            }
                            prop.properties
                                .filter(p => p.type === 'Property' && p.key.type === 'Identifier')
                                .forEach(p => attrs.add(p.key.name));
                        }
                    });
                });
            });
        });
    }
}
exports.default = TaroNormalModulesPlugin;
//# sourceMappingURL=TaroNormalModulesPlugin.js.map
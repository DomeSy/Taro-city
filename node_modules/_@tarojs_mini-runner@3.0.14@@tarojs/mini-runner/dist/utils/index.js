"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveNpmSync = exports.buildUsingComponents = exports.isQuickAppPkg = void 0;
const path = require("path");
const fs = require("fs-extra");
const resolvePath = require("resolve");
const helper_1 = require("@tarojs/helper");
function isQuickAppPkg(name) {
    return /^@(system|service)\.[a-zA-Z]{1,}/.test(name);
}
exports.isQuickAppPkg = isQuickAppPkg;
function buildUsingComponents(filePath, sourceDir, pathAlias, components, isComponent) {
    const usingComponents = Object.create(null);
    for (const component of components) {
        let componentPath = component.path;
        if (helper_1.isAliasPath(componentPath, pathAlias)) {
            componentPath = helper_1.replaceAliasPath(filePath, componentPath, pathAlias);
        }
        componentPath = helper_1.resolveMainFilePath(path.resolve(filePath, '..', componentPath));
        if (fs.existsSync(componentPath)) {
            if (helper_1.NODE_MODULES_REG.test(componentPath) && !helper_1.NODE_MODULES_REG.test(filePath)) {
                componentPath = componentPath.replace(helper_1.NODE_MODULES_REG, path.join(sourceDir, 'npm'));
            }
            componentPath = helper_1.promoteRelativePath(path.relative(filePath, componentPath));
        }
        else {
            componentPath = component.path;
        }
        if (component.name) {
            usingComponents[component.name] = componentPath.replace(path.extname(componentPath), '');
        }
    }
    return Object.assign({}, isComponent ? { component: true } : { usingComponents: {} }, components.length ? {
        usingComponents
    } : {});
}
exports.buildUsingComponents = buildUsingComponents;
const npmCached = {};
function resolveNpmSync(pkgName, root) {
    try {
        if (!npmCached[pkgName]) {
            return resolvePath.sync(pkgName, { basedir: root });
        }
        return npmCached[pkgName];
    }
    catch (err) {
        if (err.code === 'MODULE_NOT_FOUND') {
            throw new Error(`包 ${pkgName} 未安装`);
        }
        return null;
    }
}
exports.resolveNpmSync = resolveNpmSync;
//# sourceMappingURL=index.js.map
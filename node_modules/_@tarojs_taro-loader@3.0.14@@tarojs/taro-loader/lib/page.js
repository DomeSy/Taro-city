"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loader_utils_1 = require("loader-utils");
const path = require("path");
const utils_1 = require("./utils");
function default_1() {
    const options = loader_utils_1.getOptions(this);
    const config = getPageConfig(options.config, this.resourcePath);
    const configString = JSON.stringify(config);
    const stringify = (s) => loader_utils_1.stringifyRequest(this, s);
    const { isNeedRawLoader } = utils_1.frameworkMeta[options.framework];
    // raw is a placeholder loader to locate changed .vue resource
    const raw = path.join(__dirname, 'raw.js');
    const componentPath = isNeedRawLoader
        ? `${raw}!${this.resourcePath}`
        : this.request.split('!').slice(1).join('!');
    const prerender = `
if (typeof PRERENDER !== 'undefined') {
  global._prerender = inst
}`;
    return `import { createPageConfig } from '@tarojs/runtime'
import component from ${stringify(componentPath)}
var config = ${configString};
${config.enableShareTimeline ? 'component.enableShareTimeline = true' : ''}
${config.enableShareAppMessage ? 'component.enableShareAppMessage = true' : ''}
var inst = Page(createPageConfig(component, '${options.name}', {}, config || {}))
${options.prerender ? prerender : ''}
`;
}
exports.default = default_1;
function getPageConfig(configs, resourcePath) {
    const configPath = removeExt(resourcePath) + '.config';
    for (const name in configs) {
        const config = configs[name];
        if (removeExt(configs[name].path) === configPath) {
            return config.content;
        }
    }
    return {};
}
function removeExt(file) {
    return path.join(path.dirname(file), path.basename(file, path.extname(file)));
}
//# sourceMappingURL=page.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.customVueChain = void 0;
const helper_1 = require("@tarojs/helper");
const chain_1 = require("../util/chain");
function customVueChain(chain, config) {
    let vueLoaderPath;
    try {
        vueLoaderPath = require.resolve('vue-loader', {
            paths: [process.cwd()]
        });
    }
    catch (error) {
        console.log(helper_1.chalk.yellow('找不到 vue-loader，请先安装。'));
        process.exit(1);
    }
    const { VueLoaderPlugin } = require(vueLoaderPath);
    const { styleLoaderOption = {} } = config;
    chain
        .plugin('vueLoaderPlugin')
        .use(VueLoaderPlugin);
    chain.module
        .rule('customStyle')
        .merge({
        use: [{
                loader: 'style-loader',
                options: styleLoaderOption
            }]
    });
    chain.module
        .rule('vue')
        .test(helper_1.REG_VUE)
        .use('vueLoader')
        .loader(vueLoaderPath)
        .options({
        transformAssetUrls: {
            video: ['src', 'poster'],
            'live-player': 'src',
            audio: 'src',
            source: 'src',
            image: 'src',
            'cover-image': 'src',
            'taro-video': ['src', 'poster'],
            'taro-live-player': 'src',
            'taro-audio': 'src',
            'taro-source': 'src',
            'taro-image': 'src',
            'taro-cover-image': 'src'
        },
        compilerOptions: {
            modules: [{
                    preTransformNode(el) {
                        if (chain_1.DEFAULT_Components.has(el.tag)) {
                            el.tag = 'taro-' + el.tag;
                        }
                        return el;
                    }
                }]
        }
    });
}
exports.customVueChain = customVueChain;
//# sourceMappingURL=vue.js.map
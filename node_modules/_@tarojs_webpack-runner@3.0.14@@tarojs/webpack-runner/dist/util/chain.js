"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDevtool = exports.getOutput = exports.getModule = exports.getMainPlugin = exports.getCopyWebpackPlugin = exports.getCssoWebpackPlugin = exports.getTerserPlugin = exports.getHotModuleReplacementPlugin = exports.getDefinePlugin = exports.getHtmlWebpackPlugin = exports.getMiniCssExtractPlugin = exports.processEnvOption = exports.DEFAULT_Components = exports.makeConfig = void 0;
const helper_1 = require("@tarojs/helper");
const runner_utils_1 = require("@tarojs/runner-utils");
const CopyWebpackPlugin = require("copy-webpack-plugin");
const csso_webpack_plugin_1 = require("csso-webpack-plugin");
const sass = require("sass");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const lodash_1 = require("lodash");
const fp_1 = require("lodash/fp");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const path_1 = require("path");
const TerserPlugin = require("terser-webpack-plugin");
const webpack = require("webpack");
const MainPlugin_1 = require("../plugins/MainPlugin");
const postcss_conf_1 = require("../config/postcss.conf");
exports.makeConfig = (buildConfig) => __awaiter(void 0, void 0, void 0, function* () {
    const sassLoaderOption = yield runner_utils_1.getSassLoaderOption(buildConfig);
    return Object.assign(Object.assign({}, buildConfig), { sassLoaderOption });
});
const defaultTerserOption = {
    keep_fnames: true,
    output: {
        comments: false,
        keep_quoted_props: true,
        quote_keys: true,
        beautify: false
    },
    warnings: false
};
const defaultCSSCompressOption = {
    mergeRules: false,
    mergeIdents: false,
    reduceIdents: false,
    discardUnused: false,
    minifySelectors: false
};
const defaultMediaUrlLoaderOption = {
    limit: 10240
};
const defaultFontUrlLoaderOption = {
    limit: 10240
};
const defaultImageUrlLoaderOption = {
    limit: 10240
};
const defaultCssModuleOption = {
    enable: false,
    config: {
        namingPattern: 'global',
        generateScopedName: '[name]__[local]___[hash:base64:5]'
    }
};
const getLoader = (loaderName, options) => {
    return {
        loader: require.resolve(loaderName),
        options: options || {}
    };
};
const listify = listOrItem => {
    if (Array.isArray(listOrItem)) {
        return listOrItem;
    }
    return [listOrItem];
};
const getPlugin = (plugin, args) => {
    return {
        plugin,
        args
    };
};
exports.DEFAULT_Components = new Set([
    'view',
    'scroll-view',
    'swiper',
    'cover-view',
    'cover-image',
    'icon',
    'text',
    'rich-text',
    'progress',
    'button',
    'checkbox',
    'form',
    'input',
    'label',
    'picker',
    'picker-view',
    'picker-view-column',
    'radio',
    'radio-group',
    'checkbox-group',
    'slider',
    'switch',
    'textarea',
    'navigator',
    'audio',
    'image',
    'video',
    'camera',
    'live-player',
    'live-pusher',
    'map',
    'canvas',
    'open-data',
    'web-view',
    'swiper-item',
    'movable-area',
    'movable-view',
    'functional-page-navigator',
    'ad',
    'block',
    'import',
    'official-account',
    'editor'
]);
const mergeOption = ([...options]) => {
    return helper_1.recursiveMerge({}, ...options);
};
exports.processEnvOption = lodash_1.partial(fp_1.mapKeys, key => `process.env.${key}`);
const getStyleLoader = fp_1.pipe(mergeOption, lodash_1.partial(getLoader, 'style-loader'));
const getCssLoader = fp_1.pipe(mergeOption, lodash_1.partial(getLoader, 'css-loader'));
const getPostcssLoader = fp_1.pipe(mergeOption, lodash_1.partial(getLoader, 'postcss-loader'));
const getResolveUrlLoader = fp_1.pipe(mergeOption, lodash_1.partial(getLoader, 'resolve-url-loader'));
const getSassLoader = fp_1.pipe(mergeOption, lodash_1.partial(getLoader, 'sass-loader'));
const getLessLoader = fp_1.pipe(mergeOption, lodash_1.partial(getLoader, 'less-loader'));
const getStylusLoader = fp_1.pipe(mergeOption, lodash_1.partial(getLoader, 'stylus-loader'));
const getBabelLoader = fp_1.pipe(mergeOption, lodash_1.partial(getLoader, 'babel-loader'));
const getUrlLoader = fp_1.pipe(mergeOption, lodash_1.partial(getLoader, 'url-loader'));
const getExtractCssLoader = () => {
    return {
        loader: MiniCssExtractPlugin.loader
    };
};
exports.getMiniCssExtractPlugin = fp_1.pipe(mergeOption, listify, lodash_1.partial(getPlugin, MiniCssExtractPlugin));
exports.getHtmlWebpackPlugin = fp_1.pipe(mergeOption, listify, lodash_1.partial(getPlugin, HtmlWebpackPlugin));
exports.getDefinePlugin = fp_1.pipe(mergeOption, listify, lodash_1.partial(getPlugin, webpack.DefinePlugin));
exports.getHotModuleReplacementPlugin = lodash_1.partial(getPlugin, webpack.HotModuleReplacementPlugin, []);
exports.getTerserPlugin = ([enableSourceMap, terserOptions]) => {
    return new TerserPlugin({
        cache: true,
        parallel: true,
        sourceMap: enableSourceMap,
        terserOptions: helper_1.recursiveMerge({}, defaultTerserOption, terserOptions)
    });
};
exports.getCssoWebpackPlugin = ([cssoOption]) => {
    return fp_1.pipe(mergeOption, listify, lodash_1.partial(getPlugin, csso_webpack_plugin_1.default))([defaultCSSCompressOption, cssoOption]);
};
exports.getCopyWebpackPlugin = ({ copy, appPath }) => {
    const args = [
        copy.patterns.map(({ from, to }) => {
            return {
                from,
                to: path_1.resolve(appPath, to),
                context: appPath
            };
        }),
        copy.options
    ];
    return lodash_1.partial(getPlugin, CopyWebpackPlugin)(args);
};
exports.getMainPlugin = args => {
    return lodash_1.partial(getPlugin, MainPlugin_1.default)([args]);
};
const styleModuleReg = /(.*\.module).*\.(css|s[ac]ss|less|styl)\b/;
const styleGlobalReg = /(.*\.global).*\.(css|s[ac]ss|less|styl)\b/;
const isNodeModule = (filename) => /\bnode_modules\b/.test(filename);
const taroModuleRegs = [/@tarojs[/\\_]components/, /\btaro-components\b/];
const isTaroModule = (filename) => taroModuleRegs.some(reg => reg.test(filename));
const defaultEsnextModuleRegs = [
    /@tarojs[/\\_]components/,
    /\btaro-components\b/,
    /@tarojs[/\\_]taro-h5/,
    /\btaro-h5\b/,
    /@tarojs[/\\_]router/,
    /\btaro-router\b/,
    /@tarojs[/\\_]redux-h5/,
    /\btaro-redux-h5\b/,
    /@tarojs[/\\_]mobx-h5/,
    /\btaro-mobx-h5\b/
];
const getEsnextModuleRules = esnextModules => {
    return [...defaultEsnextModuleRegs, ...esnextModules];
};
exports.getModule = (appPath, { staticDirectory, designWidth, deviceRatio, enableExtract, enableSourceMap, styleLoaderOption, cssLoaderOption, lessLoaderOption, sassLoaderOption, stylusLoaderOption, fontUrlLoaderOption, imageUrlLoaderOption, mediaUrlLoaderOption, esnextModules = [], postcss }) => {
    const postcssOption = postcss || {};
    const defaultStyleLoaderOption = {
    /**
     * 移除singleton设置，会导致样式库优先级发生错误
     * singleton: true
     */
    };
    const cssModuleOptions = helper_1.recursiveMerge({}, defaultCssModuleOption, postcssOption.cssModules);
    const { namingPattern, generateScopedName } = cssModuleOptions.config;
    const cssOptions = [
        {
            importLoaders: 1,
            sourceMap: enableSourceMap,
            modules: false
        },
        cssLoaderOption
    ];
    const cssOptionsWithModule = [
        Object.assign({
            importLoaders: 1,
            sourceMap: enableSourceMap,
            modules: {
                mode: namingPattern === 'module' ? 'local' : 'global'
            }
        }, {
            modules: typeof generateScopedName === 'function'
                ? { getLocalIdent: (context, _, localName) => generateScopedName(localName, context.resourcePath) }
                : { localIdentName: generateScopedName }
        }),
        cssLoaderOption
    ];
    const esnextModuleRules = getEsnextModuleRules(esnextModules);
    /**
     * isEsnextModule
     *
     * 使用正则匹配判断是否是es模块
     * 规则参考：https://github.com/webpack/webpack/blob/master/lib/RuleSet.js#L413
     */
    const isEsnextModule = (filename) => esnextModuleRules.some(pattern => {
        if (pattern instanceof RegExp) {
            return pattern.test(filename);
        }
        else {
            return filename.indexOf(pattern) > -1;
        }
    });
    const styleLoader = getStyleLoader([defaultStyleLoaderOption, styleLoaderOption]);
    const topStyleLoader = getStyleLoader([defaultStyleLoaderOption, {
            insert: function insertAtTop(element) {
                // eslint-disable-next-line no-var
                var parent = document.querySelector('head');
                if (parent) {
                    // eslint-disable-next-line no-var
                    var lastInsertedElement = window._lastElementInsertedByStyleLoader;
                    if (!lastInsertedElement) {
                        parent.insertBefore(element, parent.firstChild);
                    }
                    else if (lastInsertedElement.nextSibling) {
                        parent.insertBefore(element, lastInsertedElement.nextSibling);
                    }
                    else {
                        parent.appendChild(element);
                    }
                    window._lastElementInsertedByStyleLoader = element;
                }
            }
        }, styleLoaderOption]);
    const extractCssLoader = getExtractCssLoader();
    const lastStyleLoader = enableExtract ? extractCssLoader : styleLoader;
    /**
     * css-loader 1.0.0版本移除了minimize选项...升级需谨慎
     *
     * https://github.com/webpack-contrib/css-loader/releases/tag/v1.0.0
     */
    const cssLoader = getCssLoader(cssOptions);
    const cssLoaders = [
        {
            use: [cssLoader]
        }
    ];
    if (cssModuleOptions.enable) {
        const cssLoaderWithModule = getCssLoader(cssOptionsWithModule);
        let cssModuleCondition;
        if (cssModuleOptions.config.namingPattern === 'module') {
            /* 不排除 node_modules 内的样式 */
            cssModuleCondition = styleModuleReg;
        }
        else {
            cssModuleCondition = {
                and: [{ exclude: styleGlobalReg }, { exclude: [isNodeModule] }]
            };
        }
        cssLoaders.unshift({
            include: [cssModuleCondition],
            use: [cssLoaderWithModule]
        });
    }
    const postcssLoader = getPostcssLoader([
        { sourceMap: enableSourceMap },
        {
            ident: 'postcss',
            plugins: postcss_conf_1.getPostcssPlugins(appPath, {
                designWidth,
                deviceRatio,
                postcssOption
            })
        }
    ]);
    const resolveUrlLoader = getResolveUrlLoader([{}]);
    const sassLoader = getSassLoader([
        {
            sourceMap: true,
            implementation: sass,
            sassOptions: {
                indentedSyntax: true,
                outputStyle: 'expanded'
            }
        },
        sassLoaderOption
    ]);
    const scssLoader = getSassLoader([
        {
            sourceMap: true,
            implementation: sass,
            sassOptions: {
                outputStyle: 'expanded'
            }
        },
        sassLoaderOption
    ]);
    const lessLoader = getLessLoader([{ sourceMap: enableSourceMap }, lessLoaderOption]);
    const stylusLoader = getStylusLoader([{ sourceMap: enableSourceMap }, stylusLoaderOption]);
    const rule = {};
    rule.taroStyle = {
        test: helper_1.REG_STYLE,
        use: [topStyleLoader],
        include: [(filename) => isTaroModule(filename)]
    };
    rule.customStyle = {
        test: helper_1.REG_STYLE,
        use: [lastStyleLoader],
        exclude: [(filename) => isTaroModule(filename)]
    };
    rule.css = {
        test: helper_1.REG_STYLE,
        oneOf: cssLoaders
    };
    rule.postcss = {
        test: helper_1.REG_STYLE,
        use: [postcssLoader],
        exclude: [
            filename => {
                if (isTaroModule(filename)) {
                    return true;
                }
                else if (isEsnextModule(filename)) {
                    return false;
                }
                else {
                    return isNodeModule(filename);
                }
            }
        ]
    };
    rule.sass = {
        test: helper_1.REG_SASS_SASS,
        use: [resolveUrlLoader, sassLoader]
    };
    rule.scss = {
        test: helper_1.REG_SASS_SCSS,
        use: [resolveUrlLoader, scssLoader]
    };
    rule.less = {
        test: helper_1.REG_LESS,
        use: [lessLoader]
    };
    rule.styl = {
        test: helper_1.REG_STYLUS,
        use: [stylusLoader]
    };
    rule.script = {
        test: helper_1.REG_SCRIPTS,
        exclude: [filename => /@tarojs\/components/.test(filename) || (/node_modules/.test(filename) && !(/taro/.test(filename)))],
        use: {
            babelLoader: getBabelLoader([{
                    compact: false
                }])
        }
    };
    rule.media = {
        test: helper_1.REG_MEDIA,
        use: {
            urlLoader: getUrlLoader([
                defaultMediaUrlLoaderOption,
                Object.assign({ name: `${staticDirectory}/media/[name].[ext]` }, mediaUrlLoaderOption)
            ])
        }
    };
    rule.font = {
        test: helper_1.REG_FONT,
        use: {
            urlLoader: getUrlLoader([
                defaultFontUrlLoaderOption,
                Object.assign({ name: `${staticDirectory}/fonts/[name].[ext]` }, fontUrlLoaderOption)
            ])
        }
    };
    rule.image = {
        test: helper_1.REG_IMAGE,
        use: {
            urlLoader: getUrlLoader([
                defaultImageUrlLoaderOption,
                Object.assign({ name: `${staticDirectory}/images/[name].[ext]` }, imageUrlLoaderOption)
            ])
        }
    };
    return { rule };
};
exports.getOutput = (appPath, [{ outputRoot, publicPath, chunkDirectory }, customOutput]) => {
    return Object.assign({ path: path_1.join(appPath, outputRoot), filename: 'js/[name].js', chunkFilename: `${chunkDirectory}/[name].js`, publicPath }, customOutput);
};
exports.getDevtool = ({ enableSourceMap, sourceMapType = 'cheap-module-eval-source-map' }) => {
    return enableSourceMap ? sourceMapType : 'none';
};
//# sourceMappingURL=chain.js.map
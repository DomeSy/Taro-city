import { VirtualNode } from 'nerv-shared';
declare function renderIntoDocument(instance: any): any;
declare const Simulate: {};
declare function isElement(instance: any): boolean;
declare function isElementOfType(instance: any, convenienceConstructor: any): boolean;
declare function isDOMComponent(inst: any): inst is Element;
declare function isDOMComponentOfType(instance: any, tagName: string): boolean;
declare function isCompositeComponent(instance: any): boolean;
declare function isCompositeComponentWithType(instance: any, type: any): boolean;
declare function findAllInRenderedTree(tree: VirtualNode, test: (vnode: VirtualNode) => boolean): any[];
declare function scryRenderedDOMComponentsWithClass(tree: any, classNames: string | string[]): any[];
declare function findRenderedDOMComponentWithClass(tree: any, classNames: string | string[]): any;
declare function scryRenderedDOMComponentsWithTag(tree: any, tag: string): any[];
declare function findRenderedDOMComponentWithTag(tree: any, tag: string): any;
declare function scryRenderedComponentsWithType(tree: any, type: any): any[];
declare function findRenderedComponentWithType(tree: any, type: string): any;
declare function mockComponent(module: any, mockTagName: any): void;
export { Simulate, renderIntoDocument, mockComponent, isElement, isElementOfType, isDOMComponent, isDOMComponentOfType, isCompositeComponent, isCompositeComponentWithType, findAllInRenderedTree, scryRenderedDOMComponentsWithClass, scryRenderedComponentsWithType, scryRenderedDOMComponentsWithTag, findRenderedComponentWithType, findRenderedDOMComponentWithClass, findRenderedDOMComponentWithTag };
declare const _default: {
    Simulate: {};
    renderIntoDocument: typeof renderIntoDocument;
    mockComponent: typeof mockComponent;
    isElement: typeof isElement;
    isElementOfType: typeof isElementOfType;
    isDOMComponent: typeof isDOMComponent;
    isDOMComponentOfType: typeof isDOMComponentOfType;
    isCompositeComponent: typeof isCompositeComponent;
    isCompositeComponentWithType: typeof isCompositeComponentWithType;
    findAllInRenderedTree: typeof findAllInRenderedTree;
    scryRenderedDOMComponentsWithClass: typeof scryRenderedDOMComponentsWithClass;
    scryRenderedComponentsWithType: typeof scryRenderedComponentsWithType;
    scryRenderedDOMComponentsWithTag: typeof scryRenderedDOMComponentsWithTag;
    findRenderedComponentWithType: typeof findRenderedComponentWithType;
    findRenderedDOMComponentWithClass: typeof findRenderedDOMComponentWithClass;
    findRenderedDOMComponentWithTag: typeof findRenderedDOMComponentWithTag;
};
export default _default;

import { CompositeComponent, VText, VVoid, VNode } from 'nerv-shared';
import FullComponent from './full-component';
import Component from './component';
import { Emiter } from './emiter';
export declare type ParentContext = Record<string, Emiter<any>>;
export declare function errorCatcher(fn: Function, component: Component<any, any>): any;
export declare function ensureVirtualNode(rendered: any): VText | VVoid | VNode;
export declare function mountVNode(vnode: any, parentContext: any, parentComponent?: any): Text | Element | Comment | (Text | Element | Comment)[];
export declare function getContextByContextType(vnode: FullComponent, parentContext: ParentContext): any;
export declare function mountComponent(vnode: FullComponent, parentContext: ParentContext, parentComponent: any): Element;
export declare function getChildContext(component: any, context?: {}): any;
export declare function renderComponent(component: Component<any, any>): any;
export declare function flushMount(): void;
export declare function reRenderComponent(prev: CompositeComponent, current: CompositeComponent): any;
export declare function updateComponent(component: any, isForce?: boolean): any;
export declare function unmountComponent(vnode: FullComponent): void;
